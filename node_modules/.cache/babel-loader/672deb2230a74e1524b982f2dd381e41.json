{"ast":null,"code":"\"use strict\";\n\nvar dgram = require(\"dgram\");\n\nvar mersenne = require(\"./mersenne\");\n\nvar mt = new mersenne.MersenneTwister19937();\nvar EPHEMERAL_LIFETIME_MS = 1000;\n\nvar Client = function (host, port, socket, options) {\n  this.host = host || \"localhost\";\n  this.port = port || 8125; // optional shared socket\n\n  this.socket = socket; // when a *shared* socked isn't provided, an ephemeral\n  // socket is demand allocated.  This ephemeral socket is closed\n  // after being idle for EPHEMERAL_LIFETIME_MS.\n\n  this.ephemeral_socket = this.last_used_timer = null;\n  options = options || {};\n  this.global_tags = options.global_tags;\n};\n\nClient.prototype.timing = function (stat, time, sample_rate, tags) {\n  var self = this;\n  var stats = {};\n  stats[stat] = time + \"|ms\";\n  self.send(stats, sample_rate, tags);\n};\n\nClient.prototype.increment = function (stats, sample_rate, tags) {\n  var self = this;\n  self.update_stats(stats, 1, sample_rate, tags);\n};\n\nClient.prototype.incrementBy = function (stats, value, tags) {\n  var self = this;\n  if (value === 0) return;\n  self.update_stats(stats, value, undefined, tags);\n};\n\nClient.prototype.decrement = function (stats, sample_rate, tags) {\n  var self = this;\n  self.update_stats(stats, -1, sample_rate, tags);\n};\n\nClient.prototype.decrementBy = function (stats, value, tags) {\n  var self = this;\n  if (value === 0) return;\n  self.update_stats(stats, -value, undefined, tags);\n};\n\nClient.prototype.gauge = function (stat, value, sample_rate, tags) {\n  var self = this;\n  var stats = {};\n  stats[stat] = value + \"|g\";\n  self.send(stats, sample_rate, tags);\n};\n\nClient.prototype.histogram = function (stat, value, sample_rate, tags) {\n  var self = this;\n  var stats = {};\n  stats[stat] = value + \"|h\";\n  self.send(stats, sample_rate, tags);\n};\n\nClient.prototype.set = function (stat, value, sample_rate, tags) {\n  var self = this;\n  var stats = {};\n  stats[stat] = value + \"|s\";\n  self.send(stats, sample_rate, tags);\n};\n\nClient.prototype.update_stats = function (stats, delta, sampleRate, tags) {\n  var self = this;\n  if (typeof stats === \"string\") stats = [stats];\n  if (!delta) delta = 1;\n  var data = {};\n\n  for (var i = 0; i < stats.length; i++) data[stats[i]] = delta + \"|c\";\n\n  self.send(data, sampleRate, tags);\n}; // An internal function update the last time the socket was\n// used.  This function is called when the socket is used\n// and causes demand allocated ephemeral sockets to be closed\n// after a period of inactivity.\n\n\nClient.prototype._update_last_used = function () {\n  if (!this.ephemeral_socket) return;\n  if (this.last_used_timer) clearTimeout(this.last_used_timer);\n  var self = this;\n  this.last_used_timer = setTimeout(function () {\n    if (self.ephemeral_socket) self.ephemeral_socket.close();\n    delete self.ephemeral_socket;\n  }, EPHEMERAL_LIFETIME_MS);\n};\n\nClient.prototype.send_data = function (buf) {\n  var socket;\n\n  if (!this.socket) {\n    if (!this.ephemeral_socket) {\n      this.ephemeral_socket = dgram.createSocket(\"udp4\");\n      this.ephemeral_socket.on(\"error\", function () {});\n    }\n\n    socket = this.ephemeral_socket;\n  } else {\n    socket = this.socket;\n  }\n\n  this._update_last_used();\n\n  socket.send(buf, 0, buf.length, this.port, this.host);\n};\n\nClient.prototype.send = function (data, sample_rate, tags) {\n  if (!tags && Array.isArray(sample_rate)) {\n    tags = sample_rate;\n    sample_rate = undefined;\n  }\n\n  if (!sample_rate) sample_rate = 1;\n  var value;\n  var sampled_data = {};\n\n  if (sample_rate < 1) {\n    if (mt.genrand_real2(0, 1) <= sample_rate) {\n      for (stat in data) {\n        value = data[stat];\n        sampled_data[stat] = value + \"|@\" + sample_rate;\n      }\n    }\n  } else sampled_data = data;\n\n  if (this.global_tags || tags) {\n    var merged_tags = [];\n    if (Array.isArray(this.global_tags)) merged_tags = merged_tags.concat(this.global_tags);\n    if (Array.isArray(tags)) merged_tags = merged_tags.concat(tags);\n\n    if (merged_tags.length > 0) {\n      var merged_tags_str = merged_tags.join(',');\n\n      for (stat in sampled_data) sampled_data[stat] = sampled_data[stat] + \"|#\" + merged_tags_str;\n    }\n  }\n\n  for (var stat in sampled_data) {\n    var send_data = stat + \":\" + sampled_data[stat];\n    this.send_data(new Buffer(send_data));\n  }\n};\n\nClient.prototype.close = function () {\n  if (this.socket) this.socket.close();\n  if (this.ephemeral_socket) this.ephemeral_socket.close();\n  if (this.last_used_timer) clearTimeout(this.last_used_timer);\n  this.ephemeral_socket = this.last_used_timer = this.socket = null;\n};\n\nexports.StatsD = Client;","map":null,"metadata":{},"sourceType":"script"}